# -*- coding: utf-8 -*-
"""BlinkitAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-EICJoePTgCgHXeaoSpA6FrGYSYMwCk6

Import Libaries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""Import Raw data"""

df = pd.read_csv('/content/blinkit_data.csv')
df

"""Field Info"""

df.columns

"""Data Types"""

df.dtypes

"""Data Cleaning"""

df['Item Fat Content'].unique()

df['Item Fat Content'] = df['Item Fat Content'].replace({'LF': 'Low Fat',
                                                          'low fat': 'Low Fat',
                                                          'reg': 'Regular'
                                                          })

print(df['Item Fat Content'].unique())

"""KPI's Requirements"""

# Total Sales
total_sales = df['Sales'].sum()

# Average Sales
avg_sales = df['Sales'].mean()

# No. Of Items Sold
no_of_items_sold = df['Sales'].count()

# Average Ratings
avg_ratings = df['Rating'].mean()

# Display
print(f'Total Sales : ${total_sales:,.0f}')
print(f'Average Sales : ${avg_sales:,.0f}')
print(f'No of Items Sold : {no_of_items_sold:,.0f}')
print(f'Average Ratings: {avg_ratings:,.1f}')

"""Total sales by Fat Content"""

sales_by_fat = df.groupby('Item Fat Content')['Sales'].sum()

plt.pie(sales_by_fat, labels=sales_by_fat.index,autopct = '%1.1f%%', startangle = 90)
plt.title('Sales by Fat Content')
plt.show()

"""Total Sales by Item Type"""

sales_by_type = df.groupby('Item Type')['Sales'].sum().sort_values(ascending=False)

plt.figure(figsize=(10,6))
bars = plt.bar(sales_by_type.index, sales_by_type.values)

plt.xticks(rotation=90)
plt.xlabel('Item Type')
plt.ylabel('Total Sales')
plt.title('Total Sales by Item type')

for bar in bars:
  plt.text(bar.get_x() + bar.get_width()/2, bar.get_height(),
          f'{bar.get_height():,.0f}', ha ='center', va = 'bottom', fontsize=8)

plt.tight_layout()
plt.show()

"""Fat Content by Outlet foe Total Sales"""

grouped = df.groupby(['Outlet Location Type' , 'Item Fat Content'])['Sales'].sum().unstack()
groupes = grouped[['Regular' , 'Low Fat']]

ax = grouped.plot(kind='bar', figsize=(8,5), title='Outlet Tier by Item Fat Content')
plt.xlabel('Outlet Location Tier')
plt.ylabel('Total Sales')
plt.legend(title='Item Fat Content')
plt.tight_layout()
plt.show()

"""Total Sales by Outlet Establishment"""

sales_by_year = df.groupby('Outlet Establishment Year')['Sales'].sum().sort_index()

plt.figure(figsize=(9,5))
plt.plot(sales_by_year.index, sales_by_year.values, marker='o', linestyle='-')

plt.xlabel('Outlet Establishment Year')
plt.ylabel('Total Sales')
plt.title('Total Sales by Outlet Establishment Year')

for x,y in zip(sales_by_year.index, sales_by_year.values):
  plt.text(x,y,f'${y:,.0f}', ha='center', va='bottom')

plt.tight_layout()
plt.show()

"""Sales by Outlet size"""

sales_by_size = df.groupby('Outlet Size')['Sales'].sum()

plt.figure(figsize=(8,5))
plt.pie(sales_by_size, labels=sales_by_size.index, autopct='%1.1f%%', startangle=90)
plt.title('Sales by Outlet Size')
plt.tight_layout()
plt.show()

"""Sales by Outlet Location"""

sales_by_location = df.groupby('Outlet Location Type')['Sales'].sum().reset_index()
sales_by_location = sales_by_location.sort_values('Sales', ascending=False)
plt.figure(figsize=(8,5))
ax = sns.barplot(x='Outlet Location Type', y='Sales', data=sales_by_location)
plt.xlabel('Outlet Location Type')
plt.ylabel('Total Sales')
plt.title('Total Sales by Outlet Location')

plt.tight_layout()
plt.show()

